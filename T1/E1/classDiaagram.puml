@startuml T1E1

' Used design pattern: Composite.
abstract class Expresion {
	+ {abstract} evaluar(): float
	+ {abstract} imprimir(): String
	+ {abstract} getCopia() : Expresion
	+ {abstract} getOpuesta() : Expresion
    + {abstract} getNumeros(): List<Constante>
	+ {abstract} getOperadores(): List<Operador>
	+ {abstract} getNormalizada(operador : Operador, expresion : Expresion): Expresion
}

' A continuación, los componentes concretos del Composite.

Expresion <|-- Constante
class Constante {
	- valor: float
}

' Used design pattern: Template Method.
' Ya que el método "evaluar()" invoca al método abstracto "getResultado()" de"Operador".
Expresion <|-- Termino
class Termino {
	- primerTermino: Expresion
	- segundoTermino: Expresion
	- operador: Operador
}

' --------------------------------------------------------------------

' Used design pattern: Strategy.
abstract class Operador {
    + {abstract} getSimbolo() : String
    + {abstract} getOpuesto(): Operador
    + {abstract} getResultado(primerTermino, segundoTermino: Expresion): float
}
' La implementación de "getResultado()" concreta el Strategy.

' Used design pattern: Singleton y Factory Method.   
Operador <|-- Suma
class Suma {
    - {static} INSTANCE : Suma
    - Suma()
    + getInstance(): Suma
}

' Used design pattern: Singleton y Factory Method.   
Operador <|-- Resta
class Resta {
    - {static} INSTANCE : Resta
    - Resta()
    + getInstance(): Resta
}

' Used design pattern: Singleton y Factory Method.   
Operador <|-- Multiplicacion
class Multiplicacion {
	- {static} INSTANCE : Multiplicacion
    - Multiplicacion()
    + getInstance(): Multiplicacion
}

' Used design pattern: Singleton y Factory Method.   
Operador <|-- Division
class Division {
    - {static} INSTANCE : Division
    - Division()
    + getInstance(): Division
}

' Used design pattern: Singleton y Factory Method.   
Operador <|-- Potencia
class Potencia {
    - {static} INSTANCE : Potencia
    - Potencia()
    + getInstance(): Potencia
}

' Used design pattern: Singleton y Factory Method.   
Operador <|-- Raiz
class Raiz {
    - {static} INSTANCE : Raiz
    - Raiz()
    + getInstance(): Raiz
}

@enduml
