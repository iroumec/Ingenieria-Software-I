@startuml classDiagram

' Used design pattern: Singleton.
class Sistema {
    - peliculas : List<Pelicula>
    - {static} INSTANCE : Sistema
    + buscar(criterio : Criterio) : List<Pelicula>
}

' -------------------------------------------------------------------

class Pelicula {
    - titulo : String
    - anioEstreno: int
    - duracion: double
    - edadMinima : int
    - director : String
    - sinopsis : String
    - generos : List<String>
    - actores : List<String>
    + getEdadMinima() : int
    + getAnioEstreno() : int
    + getDuracion() : double
    + participaActor(actor : String) : boolean
    + contieneGenero(genero : String) : boolean
    + esRentable(criterio : Criterio) : boolean
    + esDirigidaPor(director : String) : boolean
    + tituloContienePalabra(palabra : String) : boolean
}

' -------------------------------------------------------------------

' Used design pattern: Strategy.
abstract class CriterioBusqueda {
    + {abstract} cumple(pelicula : Pelicula) : boolean
}

CriterioBusqueda <|-- CriterioPalabrasEnTitulo
class CriterioPalabrasEnTitulo {
    - palabras : List<String>
}

CriterioBusqueda <|-- CriterioGeneros
class CriterioGeneros {
    - generos : List<String>
}

CriterioBusqueda <|-- CriterioDirector
class CriterioDirector {
    - director : String
}

CriterioBusqueda <|-- CriterioActores
class CriterioActores {
    - actores : List<String>
}

CriterioBusqueda <|-- CriterioAnioEstreno
class CriterioAnioEstreno {
    - anio : int
    - comparador : Comparador
}

CriterioBusqueda <|-- CriterioDuracion
class CriterioDuracion {
    - double : duracion
    - comparador : Comparador
}

CriterioBusqueda <|-- CriterioEdadMinima
class CriterioEdadMinima {
    - edad : int
    - comparador : Comparador
}

CriterioBusqueda <|-- CriterioNot
class CriterioNot {
    - criterio : CriterioBusqueda
}

' Used design pattern: Decorator.
CriterioBusqueda <|-- CriterioCombinado
class CriterioCombinado {
    - primerCriterio : CriterioBusqueda
    - segundoCriterio: CriterioBusqueda
}

CriterioCombinado <|-- CriterioCombinadoAnd
class CriterioCombinadoAnd {
}

CriterioCombinado <|-- CriterioCombinadoOr
class CriterioCombinadoOr {
}

' -------------------------------------------------------------------

' Used design pattern: Strategy.
abstract class Comparador {
    + {abstract} comparar(primerValor, segundoValor: int) : boolean
    + {abstract} comparar(primerValor, segundoValor: double) : boolean
}

' Used design patterns: Singleton y Factory Method.
' A diferencia de Sistema, estos usan "getInstance()".
' No hay ninguna razón particular detrás de esto más allá que la
' de mostrar otra forma de Singleton.
Comparador <|-- ComparadorMayor
class ComparadorMayor {
    - {static} INSTANCE : ComparadorMayor
    - ComparadorMayor()
    + getInstance(): ComparadorMayor
}

' Used design patterns: Singleton y Factory Method.
Comparador <|-- ComparadorMenor
class ComparadorMenor {
    - {static} INSTANCE : ComparadorMenor
    - ComparadorMenor()
    + getInstance(): ComparadorMenor
}

' Used design patterns: Singleton y Factory Method.
Comparador <|-- ComparadorIgual
class ComparadorIgual {
    - {static} INSTANCE : ComparadorIgual
    - ComparadorIgual()
    + getInstance(): ComparadorIgual
}

@enduml