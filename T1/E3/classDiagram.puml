@startuml classDiagram

' Used design pattern: Singleton.
class Sistema {
    - socios : List<Socio>
    - {static} INSTANCE : Sistema
    + getListadoSocios(criterio : CriterioSocio, orden : Orden) : List<Socio>
}

' --------------------------------------------------------------------

class Socio {
    - edad : int
    - nombre : String
    - apellido : String
    - ultimaCuotaPaga : boolean
    - alquileres : List<Alquiler>
    + getEdad() : int
    + getNombre() : String
    + getApellido() : String
    + tieneUltimaCuotaPaga() : boolean
    + getNumeroAlquileres(criterio : CriterioAlquiler) : int
    + getAlquileres(criterio : CriterioAlquiler) : List<Alquiler> 
}

' --------------------------------------------------------------------

class Alquiler {
    - ID : int
    - monto : double
    - fecha : LocalDate
    + getID() : int
    + getMonto() : double
    + getFecha() : LocalDate
}

' --------------------------------------------------------------------

' Used design pattern: Strategy.
abstract class CriterioSocio {
    + {abstract} cumple(socio : Socio) : boolean
}

CriterioSocio <|-- CriterioCuotaPaga
class CriterioCuotaPaga {
}

CriterioSocio <|-- CriterioEdad
class CriterioEdad {
    - edad : int
    - comparador : Comparador
}

CriterioSocio <|-- CriterioSobreAlquiler
class CriterioSobreAlquiler {
    - criterioAlquiler : CriterioAlquiler
}

' Used design pattern: Decorator.
CriterioSocio <|-- CriterioCombinado
class CriterioCombinado {
    - primerCriterio : CriterioSocio
    - segundoCriterio : CriterioSocio
}

CriterioCombinado <|-- CriterioCombinadoAnd
class CriterioCombinadoAnd {
}

CriterioCombinado <|-- CriterioCombinadoOr
class CriterioCombinadoOr {
}

' --------------------------------------------------------------------

' Used design pattern: Strategy.
abstract class CriterioAlquiler {
    + {abstract} cumple(alquiler : Alquiler) : boolean
}

CriterioAlquiler <|-- CriterioCanchaAlquilada
class CriterioCanchaAlquilada {
    - IDCancha : int
    - nroAlquileres : int
    - comparador : Comparador
}

CriterioAlquiler <|-- CriterioMontoPagado
class CriterioMontoPagado {
    - monto : double
    - comparador : Comparador
}

' --------------------------------------------------------------------

' Used design pattern: Strategy.
abstract class Orden {
    + {abstract} compare(s1, s2 : Socio) : int
}

' Used design pattern: Singleton.
Orden <|-- OrdenAlfabetico
class OrdenAlfabetico {
}

Orden <|-- OrdenEdad
class OrdenEdad {
    - comparador : Comparador
}

' --------------------------------------------------------------------

' Used design pattern: Strategy.
abstract class Comparador {
    + {abstract} comparar(primerValor, segundoValor: int) : boolean
    + {abstract} comparar(primerValor, segundoValor: double) : boolean
}

' Used design patterns: Singleton y Factory Method.
Comparador <|-- ComparadorMayor
class ComparadorMayor {
    - {static} INSTANCE : ComparadorMayor
    - ComparadorMayor()
    + getInstance(): ComparadorMayor
}

' Used design patterns: Singleton y Factory Method.
Comparador <|-- ComparadorMenor
class ComparadorMenor {
    - {static} INSTANCE : ComparadorMenor
    - ComparadorMenor()
    + getInstance(): ComparadorMenor
}

' Used design patterns: Singleton y Factory Method.
Comparador <|-- ComparadorIgual
class ComparadorIgual {
    - {static} INSTANCE : ComparadorIgual
    - ComparadorIgual()
    + getInstance(): ComparadorIgual
}

@enduml
