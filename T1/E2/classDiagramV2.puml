@startuml classDiagram

abstract class Ficha {
    - fortaleza : int
    - casillerosOcupados: int
    + {abstract} getFortaleza() : int
    + {abstract} getCasillerosOcupados() : int
    + {abstract} getPoderDestruccion(): float
}

Ficha <|-- FichaSimple
class FichaSimple {
    - poderDestruccion: int
}

Ficha <|-- FichaEspecial
class FichaEspecial {
}

' --------------------------------------------------------------------

class Tablero {
    - puntajeMinimo : int
    - fichas : List<Ficha>
    + getDificultad() : float
    + getFichas(criterio : CriterioBusqueda) : List<Ficha>
}

' --------------------------------------------------------------------

' Used design pattern: Strategy.
abstract class CriterioBusqueda {
    + {abstract} cumple(ficha : Ficha) : boolean
}

CriterioBusqueda <|-- CriterioPoderDestruccion
class CriterioPoderDestruccion {
    - poderDestruccion : float
    - comparador : Comparador
}

CriterioBusqueda <|-- CriterioEspacioOcupado
class CriterioEspacioOcupado {
    - casillerosOcupados : int
    - comparador : Comparador
}

CriterioBusqueda <|-- CriterioFortaleza
class CriterioFortaleza {
    - fortaleza : int
    - comparador : Comparador
}

CriterioBusqueda <|-- CriterioNot
class CriterioNot {
    - criterio : CriterioBusqueda
}

' Used design pattern: Decorator.
CriterioBusqueda <|-- CriterioCombinado 
class CriterioCombinado {
    - primerCriterio : CriterioBusqueda
    - segundoCriterio : CriterioBusqueda
}

CriterioCombinado <|-- CriterioCombinadoAnd
class CriterioCombinadoAnd {
}

CriterioCombinado <|-- CriterioCombinadoOr
class CriterioCombinadoOr {
}

' --------------------------------------------------------------------

' Used design pattern: Strategy.
abstract class Comparador {
    + {abstract} comparar(primerValor, segundoValor: int) : boolean
    + {abstract} comparar(primerValor, segundoValor: double) : boolean
}

' Used design patterns: Singleton y Factory Method.
Comparador <|-- ComparadorMayor
class ComparadorMayor {
    - {static} INSTANCE : ComparadorMayor
    - ComparadorMayor()
    + getInstance(): ComparadorMayor
}

' Used design patterns: Singleton y Factory Method.
Comparador <|-- ComparadorMenor
class ComparadorMenor {
    - {static} INSTANCE : ComparadorMenor
    - ComparadorMenor()
    + getInstance(): ComparadorMenor
}

' Used design patterns: Singleton y Factory Method.
Comparador <|-- ComparadorIgual
class ComparadorIgual {
    - {static} INSTANCE : ComparadorIgual
    - ComparadorIgual()
    + getInstance(): ComparadorIgual
}

@enduml